// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User { 
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  email       String @db.VarChar(60)
  password    String @db.VarChar(255)
  image       String @db.VarChar(255) @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  birthdate   DateTime? @db.Date
  posts       Post[]
  comments    Comment[]
  products    Product[]
  role        String @db.VarChar(10) @default("user")

  @@map("users")
}

model Post {
  id         Int     @id @default(autoincrement())
  content    String  @db.Text
  image      String  @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  user       User @relation(fields: [user_id], references: [id])
  comments   Comment[]

  @@map("posts")
}

model Comment { 
  id         Int      @id @default(autoincrement())
  comment    String   @db.VarChar(255)
  user_id    Int      
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id])

  @@map("comments")
}

model Category {
  id            Int @id @default(autoincrement())
  category      String @db.VarChar(255)
  slug          String @db.VarChar(255)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  products      Product[]

  @@map("categories")
}

model Product {
  id            Int @id @default(autoincrement())
  name          String @db.VarChar(255)
  slug          String @db.VarChar(255)
  description   String
  price         Int
  stock         Int
  user_id       Int
  category_id   Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User @relation(fields: [user_id], references: [id])
  category      Category @relation(fields: [category_id], references: [id])

  @@map("products")
}